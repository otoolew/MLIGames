// ------------------------------------------------------------------------------
//  Copyright © 2015 Schell Games, LLC. All Rights Reserved.
//
//  Contact: Eric Policaro
//
//  Created: 9/3/2015 12:39:59 PM
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using SG.Core.OnGUI;

using UnityEditor;
using UnityEngine;

namespace SG.Core
{
    /// <summary>
    /// Custom inspector for the FrameworkSettings Editor.
    /// </summary>
    [CustomEditor(typeof(FrameworkSettings))]
    public class FrameworkSettingsEditor : Editor
    {
        static FrameworkSettingsEditor()
        {
            ModulesInUse = new HashSet<ModuleInfo>();
            foreach (Assembly assembly in AppDomain.CurrentDomain
                                                    .GetAssemblies()
                                                    .Where(a => a.FullName.StartsWith("Assembly")))
            {
                foreach (Type type in assembly.GetTypes()
                    .Where(t => !t.IsAbstract)
                    .Where(t => t.BaseType == typeof(ModuleInfo)))
                {
                    ModulesInUse.Add((ModuleInfo)Activator.CreateInstance(type));
                }
            }
        }

        public void OnEnable()
        {
            _target = (FrameworkSettings)target;
            _richText = new GUIStyle();
            _richText.richText = true;
        }

        public override void OnInspectorGUI()
        {
            GUI.enabled = true;

            serializedObject.Update();

            EditorOnGUILayout.DrawPropertiesExcluding(serializedObject, "m_Script",
                "FrameworkRoot", "UsingPerforce");

            EditorGUILayout.BeginHorizontal();
            
            EditorGUILayout.PrefixLabel("Framework Root");
            _target.FrameworkRoot = EditorGUILayout.TextField(ModuleSettings.FrameworkRoot);
            ModuleSettings.FrameworkRoot = _target.FrameworkRoot;
            EditorGUILayout.EndHorizontal();

            _target.UsingPerforce = EditorGUILayout.Toggle("Using Perforce?", _target.UsingPerforce);

            if (GUILayout.Button("Refresh Framework"))
            {
                FrameworkEditorLoader.InitializeFramework();
            }

            EditorGUILayout.HelpBox("Project relative location of the Unity Framework. " + 
                "This will determine where Framework generated assets and settings will be placed." +
                "If you change this value, reload the project to re-create any autogenerated settings.",
                MessageType.Info);
            
            EditorGUILayout.Separator();
            
            EditorGUILayout.LabelField("<b><color=grey><size=14>Modules</size></color></b>", _richText);
            foreach (var info in ModulesInUse)
            {
                DrawModuleInfo(info);
            }

            EditorUtility.SetDirty(_target);
            serializedObject.ApplyModifiedProperties();
        }

        private void DrawModuleInfo(ModuleInfo info)
        {
            var moduleName = string.Format("<b><color=white><size=11>{0}</size></color></b>", info.Name);
            EditorGUILayout.LabelField(moduleName, _richText);

            var desc = new StringBuilder()
                .AppendFormat("Version: {0}\n\n", info.Version)
                .Append(info.Description);
            EditorGUILayout.HelpBox(desc.ToString(), MessageType.None);

            EditorGUILayout.BeginHorizontal();
            if (GUILayout.Button("Docs", GUILayout.Width(100f)))
            {
                Application.OpenURL(info.DocsUrl.ToString());
            }
            if (GUILayout.Button("Jira", GUILayout.Width(100f)))
            {
                Application.OpenURL(info.IssuesUrl.ToString());
            }
            EditorGUILayout.EndHorizontal();

            EditorGUILayout.Separator();
        }

        private GUIStyle _richText;
        private FrameworkSettings _target;
        private static readonly HashSet<ModuleInfo> ModulesInUse;
    }
}
