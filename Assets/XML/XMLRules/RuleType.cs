//
// RuleType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class RuleType : Altova.Node
	{
		#region Forward constructors
		public RuleType() : base() { SetCollectionParents(); }
		public RuleType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public RuleType(XmlNode node) : base(node) { SetCollectionParents(); }
		public RuleType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "Name");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Name", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "", "Condition");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Condition", i);
				InternalAdjustPrefix(DOMNode, true);
				new LogicalExpression(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "Action");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Action", i);
				InternalAdjustPrefix(DOMNode, true);
				new ActionType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "Priority");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Priority", i);
				InternalAdjustPrefix(DOMNode, true);
			}
		}


		#region Name accessor methods
		public int GetNameMinCount()
		{
			return 1;
		}

		public int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameMaxCount()
		{
			return 1;
		}

		public int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "", "Name");
		}

		public SchemaString GetNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Name", index)));
		}

		public SchemaString GetName()
		{
			return GetNameAt(0);
		}

		public SchemaString Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Name", index);
		}

		public void RemoveName()
		{
			while (HasName())
				RemoveNameAt(0);
		}

		public void AddName(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "", "Name", newValue.ToString());
		}

		public void InsertNameAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Name", index, newValue.ToString());
		}

		public void ReplaceNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Name", index, newValue.ToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            RuleType parent;
            public RuleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			RuleType parent;
			public NameEnumerator(RuleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Name collection

		#region Condition accessor methods
		public int GetConditionMinCount()
		{
			return 1;
		}

		public int ConditionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetConditionMaxCount()
		{
			return 1;
		}

		public int ConditionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetConditionCount()
		{
			return DomChildCount(NodeType.Element, "", "Condition");
		}

		public int ConditionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Condition");
			}
		}

		public bool HasCondition()
		{
			return HasDomChild(NodeType.Element, "", "Condition");
		}

		public LogicalExpression GetConditionAt(int index)
		{
			return new LogicalExpression(GetDomChildAt(NodeType.Element, "", "Condition", index));
		}

		public LogicalExpression GetCondition()
		{
			return GetConditionAt(0);
		}

		public LogicalExpression Condition
		{
			get
			{
				return GetConditionAt(0);
			}
		}

		public void RemoveConditionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Condition", index);
		}

		public void RemoveCondition()
		{
			while (HasCondition())
				RemoveConditionAt(0);
		}

		public void AddCondition(LogicalExpression newValue)
		{
			AppendDomElement("", "Condition", newValue);
		}

		public void InsertConditionAt(LogicalExpression newValue, int index)
		{
			InsertDomElementAt("", "Condition", index, newValue);
		}

		public void ReplaceConditionAt(LogicalExpression newValue, int index)
		{
			ReplaceDomElementAt("", "Condition", index, newValue);
		}
		#endregion // Condition accessor methods

		#region Condition collection
        public ConditionCollection	MyConditions = new ConditionCollection( );

        public class ConditionCollection: IEnumerable
        {
            RuleType parent;
            public RuleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ConditionEnumerator GetEnumerator() 
			{
				return new ConditionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ConditionEnumerator: IEnumerator 
        {
			int nIndex;
			RuleType parent;
			public ConditionEnumerator(RuleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ConditionCount );
			}
			public LogicalExpression  Current 
			{
				get 
				{
					return(parent.GetConditionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Condition collection

		#region Action accessor methods
		public int GetActionMinCount()
		{
			return 1;
		}

		public int ActionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetActionMaxCount()
		{
			return Int32.MaxValue;
		}

		public int ActionMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetActionCount()
		{
			return DomChildCount(NodeType.Element, "", "Action");
		}

		public int ActionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Action");
			}
		}

		public bool HasAction()
		{
			return HasDomChild(NodeType.Element, "", "Action");
		}

		public ActionType GetActionAt(int index)
		{
			return new ActionType(GetDomChildAt(NodeType.Element, "", "Action", index));
		}

		public ActionType GetAction()
		{
			return GetActionAt(0);
		}

		public ActionType Action
		{
			get
			{
				return GetActionAt(0);
			}
		}

		public void RemoveActionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Action", index);
		}

		public void RemoveAction()
		{
			while (HasAction())
				RemoveActionAt(0);
		}

		public void AddAction(ActionType newValue)
		{
			AppendDomElement("", "Action", newValue);
		}

		public void InsertActionAt(ActionType newValue, int index)
		{
			InsertDomElementAt("", "Action", index, newValue);
		}

		public void ReplaceActionAt(ActionType newValue, int index)
		{
			ReplaceDomElementAt("", "Action", index, newValue);
		}
		#endregion // Action accessor methods

		#region Action collection
        public ActionCollection	MyActions = new ActionCollection( );

        public class ActionCollection: IEnumerable
        {
            RuleType parent;
            public RuleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ActionEnumerator GetEnumerator() 
			{
				return new ActionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ActionEnumerator: IEnumerator 
        {
			int nIndex;
			RuleType parent;
			public ActionEnumerator(RuleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ActionCount );
			}
			public ActionType  Current 
			{
				get 
				{
					return(parent.GetActionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Action collection

		#region Priority accessor methods
		public int GetPriorityMinCount()
		{
			return 1;
		}

		public int PriorityMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPriorityMaxCount()
		{
			return 1;
		}

		public int PriorityMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetPriorityCount()
		{
			return DomChildCount(NodeType.Element, "", "Priority");
		}

		public int PriorityCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Priority");
			}
		}

		public bool HasPriority()
		{
			return HasDomChild(NodeType.Element, "", "Priority");
		}

		public SchemaLong GetPriorityAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Priority", index)));
		}

		public SchemaLong GetPriority()
		{
			return GetPriorityAt(0);
		}

		public SchemaLong Priority
		{
			get
			{
				return GetPriorityAt(0);
			}
		}

		public void RemovePriorityAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Priority", index);
		}

		public void RemovePriority()
		{
			while (HasPriority())
				RemovePriorityAt(0);
		}

		public void AddPriority(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Element, "", "Priority", newValue.ToString());
		}

		public void InsertPriorityAt(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Priority", index, newValue.ToString());
		}

		public void ReplacePriorityAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Priority", index, newValue.ToString());
		}
		#endregion // Priority accessor methods

		#region Priority collection
        public PriorityCollection	MyPrioritys = new PriorityCollection( );

        public class PriorityCollection: IEnumerable
        {
            RuleType parent;
            public RuleType Parent
			{
				set
				{
					parent = value;
				}
			}
			public PriorityEnumerator GetEnumerator() 
			{
				return new PriorityEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class PriorityEnumerator: IEnumerator 
        {
			int nIndex;
			RuleType parent;
			public PriorityEnumerator(RuleType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.PriorityCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetPriorityAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Priority collection

        private void SetCollectionParents()
        {
            MyNames.Parent = this; 
            MyConditions.Parent = this; 
            MyActions.Parent = this; 
            MyPrioritys.Parent = this; 
	}
}
}
