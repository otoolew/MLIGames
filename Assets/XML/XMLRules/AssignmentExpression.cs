//
// AssignmentExpression.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class AssignmentExpression : Altova.Node
	{
		#region Forward constructors
		public AssignmentExpression() : base() { SetCollectionParents(); }
		public AssignmentExpression(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public AssignmentExpression(XmlNode node) : base(node) { SetCollectionParents(); }
		public AssignmentExpression(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "Variable");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Variable", i);
				InternalAdjustPrefix(DOMNode, true);
				new VariableType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "Expression");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Expression", i);
				InternalAdjustPrefix(DOMNode, true);
				new ArithmeticExpression(DOMNode).AdjustPrefix();
			}
		}


		#region Variable accessor methods
		public int GetVariableMinCount()
		{
			return 1;
		}

		public int VariableMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetVariableMaxCount()
		{
			return 1;
		}

		public int VariableMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetVariableCount()
		{
			return DomChildCount(NodeType.Element, "", "Variable");
		}

		public int VariableCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Variable");
			}
		}

		public bool HasVariable()
		{
			return HasDomChild(NodeType.Element, "", "Variable");
		}

		public VariableType GetVariableAt(int index)
		{
			return new VariableType(GetDomChildAt(NodeType.Element, "", "Variable", index));
		}

		public VariableType GetVariable()
		{
			return GetVariableAt(0);
		}

		public VariableType Variable
		{
			get
			{
				return GetVariableAt(0);
			}
		}

		public void RemoveVariableAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Variable", index);
		}

		public void RemoveVariable()
		{
			while (HasVariable())
				RemoveVariableAt(0);
		}

		public void AddVariable(VariableType newValue)
		{
			AppendDomElement("", "Variable", newValue);
		}

		public void InsertVariableAt(VariableType newValue, int index)
		{
			InsertDomElementAt("", "Variable", index, newValue);
		}

		public void ReplaceVariableAt(VariableType newValue, int index)
		{
			ReplaceDomElementAt("", "Variable", index, newValue);
		}
		#endregion // Variable accessor methods

		#region Variable collection
        public VariableCollection	MyVariables = new VariableCollection( );

        public class VariableCollection: IEnumerable
        {
            AssignmentExpression parent;
            public AssignmentExpression Parent
			{
				set
				{
					parent = value;
				}
			}
			public VariableEnumerator GetEnumerator() 
			{
				return new VariableEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class VariableEnumerator: IEnumerator 
        {
			int nIndex;
			AssignmentExpression parent;
			public VariableEnumerator(AssignmentExpression par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.VariableCount );
			}
			public VariableType  Current 
			{
				get 
				{
					return(parent.GetVariableAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Variable collection

		#region Expression accessor methods
		public int GetExpressionMinCount()
		{
			return 1;
		}

		public int ExpressionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExpressionMaxCount()
		{
			return 1;
		}

		public int ExpressionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetExpressionCount()
		{
			return DomChildCount(NodeType.Element, "", "Expression");
		}

		public int ExpressionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Expression");
			}
		}

		public bool HasExpression()
		{
			return HasDomChild(NodeType.Element, "", "Expression");
		}

		public ArithmeticExpression GetExpressionAt(int index)
		{
			return new ArithmeticExpression(GetDomChildAt(NodeType.Element, "", "Expression", index));
		}

		public ArithmeticExpression GetExpression()
		{
			return GetExpressionAt(0);
		}

		public ArithmeticExpression Expression
		{
			get
			{
				return GetExpressionAt(0);
			}
		}

		public void RemoveExpressionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Expression", index);
		}

		public void RemoveExpression()
		{
			while (HasExpression())
				RemoveExpressionAt(0);
		}

		public void AddExpression(ArithmeticExpression newValue)
		{
			AppendDomElement("", "Expression", newValue);
		}

		public void InsertExpressionAt(ArithmeticExpression newValue, int index)
		{
			InsertDomElementAt("", "Expression", index, newValue);
		}

		public void ReplaceExpressionAt(ArithmeticExpression newValue, int index)
		{
			ReplaceDomElementAt("", "Expression", index, newValue);
		}
		#endregion // Expression accessor methods

		#region Expression collection
        public ExpressionCollection	MyExpressions = new ExpressionCollection( );

        public class ExpressionCollection: IEnumerable
        {
            AssignmentExpression parent;
            public AssignmentExpression Parent
			{
				set
				{
					parent = value;
				}
			}
			public ExpressionEnumerator GetEnumerator() 
			{
				return new ExpressionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ExpressionEnumerator: IEnumerator 
        {
			int nIndex;
			AssignmentExpression parent;
			public ExpressionEnumerator(AssignmentExpression par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ExpressionCount );
			}
			public ArithmeticExpression  Current 
			{
				get 
				{
					return(parent.GetExpressionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Expression collection

        private void SetCollectionParents()
        {
            MyVariables.Parent = this; 
            MyExpressions.Parent = this; 
	}
}
}
