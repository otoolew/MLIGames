//
// UnaryOperator.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class UnaryOperator : Altova.Node
	{
		#region Forward constructors
		public UnaryOperator() : base() { SetCollectionParents(); }
		public UnaryOperator(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public UnaryOperator(XmlNode node) : base(node) { SetCollectionParents(); }
		public UnaryOperator(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "Not");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Not", i);
				InternalAdjustPrefix(DOMNode, true);
			}
		}


		#region Not accessor methods
		public int GetNotMinCount()
		{
			return 1;
		}

		public int NotMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNotMaxCount()
		{
			return 1;
		}

		public int NotMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNotCount()
		{
			return DomChildCount(NodeType.Element, "", "Not");
		}

		public int NotCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Not");
			}
		}

		public bool HasNot()
		{
			return HasDomChild(NodeType.Element, "", "Not");
		}

		public SchemaString GetNotAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Not", index)));
		}

		public SchemaString GetNot()
		{
			return GetNotAt(0);
		}

		public SchemaString Not
		{
			get
			{
				return GetNotAt(0);
			}
		}

		public void RemoveNotAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Not", index);
		}

		public void RemoveNot()
		{
			while (HasNot())
				RemoveNotAt(0);
		}

		public void AddNot(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "", "Not", newValue.ToString());
		}

		public void InsertNotAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Not", index, newValue.ToString());
		}

		public void ReplaceNotAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Not", index, newValue.ToString());
		}
		#endregion // Not accessor methods

		#region Not collection
        public NotCollection	MyNots = new NotCollection( );

        public class NotCollection: IEnumerable
        {
            UnaryOperator parent;
            public UnaryOperator Parent
			{
				set
				{
					parent = value;
				}
			}
			public NotEnumerator GetEnumerator() 
			{
				return new NotEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NotEnumerator: IEnumerator 
        {
			int nIndex;
			UnaryOperator parent;
			public NotEnumerator(UnaryOperator par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NotCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetNotAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Not collection

        private void SetCollectionParents()
        {
            MyNots.Parent = this; 
	}
}
}
