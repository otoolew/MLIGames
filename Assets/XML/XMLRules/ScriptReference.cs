//
// ScriptReference.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class ScriptReference : Altova.Node
	{
		#region Forward constructors
		public ScriptReference() : base() { SetCollectionParents(); }
		public ScriptReference(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ScriptReference(XmlNode node) : base(node) { SetCollectionParents(); }
		public ScriptReference(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "ScriptName");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "ScriptName", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "", "Parameter");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Parameter", i);
				InternalAdjustPrefix(DOMNode, true);
				new ParameterType(DOMNode).AdjustPrefix();
			}
		}


		#region ScriptName accessor methods
		public int GetScriptNameMinCount()
		{
			return 1;
		}

		public int ScriptNameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetScriptNameMaxCount()
		{
			return 1;
		}

		public int ScriptNameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetScriptNameCount()
		{
			return DomChildCount(NodeType.Element, "", "ScriptName");
		}

		public int ScriptNameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ScriptName");
			}
		}

		public bool HasScriptName()
		{
			return HasDomChild(NodeType.Element, "", "ScriptName");
		}

		public SchemaString GetScriptNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "ScriptName", index)));
		}

		public SchemaString GetScriptName()
		{
			return GetScriptNameAt(0);
		}

		public SchemaString ScriptName
		{
			get
			{
				return GetScriptNameAt(0);
			}
		}

		public void RemoveScriptNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ScriptName", index);
		}

		public void RemoveScriptName()
		{
			while (HasScriptName())
				RemoveScriptNameAt(0);
		}

		public void AddScriptName(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "", "ScriptName", newValue.ToString());
		}

		public void InsertScriptNameAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "ScriptName", index, newValue.ToString());
		}

		public void ReplaceScriptNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "ScriptName", index, newValue.ToString());
		}
		#endregion // ScriptName accessor methods

		#region ScriptName collection
        public ScriptNameCollection	MyScriptNames = new ScriptNameCollection( );

        public class ScriptNameCollection: IEnumerable
        {
            ScriptReference parent;
            public ScriptReference Parent
			{
				set
				{
					parent = value;
				}
			}
			public ScriptNameEnumerator GetEnumerator() 
			{
				return new ScriptNameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ScriptNameEnumerator: IEnumerator 
        {
			int nIndex;
			ScriptReference parent;
			public ScriptNameEnumerator(ScriptReference par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ScriptNameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetScriptNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // ScriptName collection

		#region Parameter accessor methods
		public int GetParameterMinCount()
		{
			return 0;
		}

		public int ParameterMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetParameterMaxCount()
		{
			return Int32.MaxValue;
		}

		public int ParameterMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetParameterCount()
		{
			return DomChildCount(NodeType.Element, "", "Parameter");
		}

		public int ParameterCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Parameter");
			}
		}

		public bool HasParameter()
		{
			return HasDomChild(NodeType.Element, "", "Parameter");
		}

		public ParameterType GetParameterAt(int index)
		{
			return new ParameterType(GetDomChildAt(NodeType.Element, "", "Parameter", index));
		}

		public ParameterType GetParameter()
		{
			return GetParameterAt(0);
		}

		public ParameterType Parameter
		{
			get
			{
				return GetParameterAt(0);
			}
		}

		public void RemoveParameterAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Parameter", index);
		}

		public void RemoveParameter()
		{
			while (HasParameter())
				RemoveParameterAt(0);
		}

		public void AddParameter(ParameterType newValue)
		{
			AppendDomElement("", "Parameter", newValue);
		}

		public void InsertParameterAt(ParameterType newValue, int index)
		{
			InsertDomElementAt("", "Parameter", index, newValue);
		}

		public void ReplaceParameterAt(ParameterType newValue, int index)
		{
			ReplaceDomElementAt("", "Parameter", index, newValue);
		}
		#endregion // Parameter accessor methods

		#region Parameter collection
        public ParameterCollection	MyParameters = new ParameterCollection( );

        public class ParameterCollection: IEnumerable
        {
            ScriptReference parent;
            public ScriptReference Parent
			{
				set
				{
					parent = value;
				}
			}
			public ParameterEnumerator GetEnumerator() 
			{
				return new ParameterEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ParameterEnumerator: IEnumerator 
        {
			int nIndex;
			ScriptReference parent;
			public ParameterEnumerator(ScriptReference par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ParameterCount );
			}
			public ParameterType  Current 
			{
				get 
				{
					return(parent.GetParameterAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Parameter collection

        private void SetCollectionParents()
        {
            MyScriptNames.Parent = this; 
            MyParameters.Parent = this; 
	}
}
}
