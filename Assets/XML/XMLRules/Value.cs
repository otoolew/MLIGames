//
// Value.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class Value : Altova.Node
	{
		#region Forward constructors
		public Value() : base() { SetCollectionParents(); }
		public Value(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public Value(XmlNode node) : base(node) { SetCollectionParents(); }
		public Value(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "Variable");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Variable", i);
				InternalAdjustPrefix(DOMNode, true);
				new VariableType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "Constant");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Constant", i);
				InternalAdjustPrefix(DOMNode, true);
				new ConstantType(DOMNode).AdjustPrefix();
			}
		}


		#region Variable accessor methods
		public int GetVariableMinCount()
		{
			return 1;
		}

		public int VariableMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetVariableMaxCount()
		{
			return 1;
		}

		public int VariableMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetVariableCount()
		{
			return DomChildCount(NodeType.Element, "", "Variable");
		}

		public int VariableCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Variable");
			}
		}

		public bool HasVariable()
		{
			return HasDomChild(NodeType.Element, "", "Variable");
		}

		public VariableType GetVariableAt(int index)
		{
			return new VariableType(GetDomChildAt(NodeType.Element, "", "Variable", index));
		}

		public VariableType GetVariable()
		{
			return GetVariableAt(0);
		}

		public VariableType Variable
		{
			get
			{
				return GetVariableAt(0);
			}
		}

		public void RemoveVariableAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Variable", index);
		}

		public void RemoveVariable()
		{
			while (HasVariable())
				RemoveVariableAt(0);
		}

		public void AddVariable(VariableType newValue)
		{
			AppendDomElement("", "Variable", newValue);
		}

		public void InsertVariableAt(VariableType newValue, int index)
		{
			InsertDomElementAt("", "Variable", index, newValue);
		}

		public void ReplaceVariableAt(VariableType newValue, int index)
		{
			ReplaceDomElementAt("", "Variable", index, newValue);
		}
		#endregion // Variable accessor methods

		#region Variable collection
        public VariableCollection	MyVariables = new VariableCollection( );

        public class VariableCollection: IEnumerable
        {
            Value parent;
            public Value Parent
			{
				set
				{
					parent = value;
				}
			}
			public VariableEnumerator GetEnumerator() 
			{
				return new VariableEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class VariableEnumerator: IEnumerator 
        {
			int nIndex;
			Value parent;
			public VariableEnumerator(Value par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.VariableCount );
			}
			public VariableType  Current 
			{
				get 
				{
					return(parent.GetVariableAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Variable collection

		#region Constant accessor methods
		public int GetConstantMinCount()
		{
			return 1;
		}

		public int ConstantMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetConstantMaxCount()
		{
			return Int32.MaxValue;
		}

		public int ConstantMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetConstantCount()
		{
			return DomChildCount(NodeType.Element, "", "Constant");
		}

		public int ConstantCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Constant");
			}
		}

		public bool HasConstant()
		{
			return HasDomChild(NodeType.Element, "", "Constant");
		}

		public ConstantType GetConstantAt(int index)
		{
			return new ConstantType(GetDomChildAt(NodeType.Element, "", "Constant", index));
		}

		public ConstantType GetConstant()
		{
			return GetConstantAt(0);
		}

		public ConstantType Constant
		{
			get
			{
				return GetConstantAt(0);
			}
		}

		public void RemoveConstantAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Constant", index);
		}

		public void RemoveConstant()
		{
			while (HasConstant())
				RemoveConstantAt(0);
		}

		public void AddConstant(ConstantType newValue)
		{
			AppendDomElement("", "Constant", newValue);
		}

		public void InsertConstantAt(ConstantType newValue, int index)
		{
			InsertDomElementAt("", "Constant", index, newValue);
		}

		public void ReplaceConstantAt(ConstantType newValue, int index)
		{
			ReplaceDomElementAt("", "Constant", index, newValue);
		}
		#endregion // Constant accessor methods

		#region Constant collection
        public ConstantCollection	MyConstants = new ConstantCollection( );

        public class ConstantCollection: IEnumerable
        {
            Value parent;
            public Value Parent
			{
				set
				{
					parent = value;
				}
			}
			public ConstantEnumerator GetEnumerator() 
			{
				return new ConstantEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ConstantEnumerator: IEnumerator 
        {
			int nIndex;
			Value parent;
			public ConstantEnumerator(Value par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ConstantCount );
			}
			public ConstantType  Current 
			{
				get 
				{
					return(parent.GetConstantAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Constant collection

        private void SetCollectionParents()
        {
            MyVariables.Parent = this; 
            MyConstants.Parent = this; 
	}
}
}
