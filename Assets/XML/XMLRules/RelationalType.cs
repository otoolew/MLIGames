//
// RelationalType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class RelationalType : Altova.Node
	{
		#region Forward constructors
		public RelationalType() : base() { SetCollectionParents(); }
		public RelationalType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public RelationalType(XmlNode node) : base(node) { SetCollectionParents(); }
		public RelationalType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "LHSArithmeticExpression");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "LHSArithmeticExpression", i);
				InternalAdjustPrefix(DOMNode, true);
				new ArithmeticExpression(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "RelationalOperator");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "RelationalOperator", i);
				InternalAdjustPrefix(DOMNode, true);
				new RelationalOperator(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "RHSArithmeticExpression");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "RHSArithmeticExpression", i);
				InternalAdjustPrefix(DOMNode, true);
				new ArithmeticExpression(DOMNode).AdjustPrefix();
			}
		}


		#region LHSArithmeticExpression accessor methods
		public int GetLHSArithmeticExpressionMinCount()
		{
			return 1;
		}

		public int LHSArithmeticExpressionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLHSArithmeticExpressionMaxCount()
		{
			return 1;
		}

		public int LHSArithmeticExpressionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLHSArithmeticExpressionCount()
		{
			return DomChildCount(NodeType.Element, "", "LHSArithmeticExpression");
		}

		public int LHSArithmeticExpressionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "LHSArithmeticExpression");
			}
		}

		public bool HasLHSArithmeticExpression()
		{
			return HasDomChild(NodeType.Element, "", "LHSArithmeticExpression");
		}

		public ArithmeticExpression GetLHSArithmeticExpressionAt(int index)
		{
			return new ArithmeticExpression(GetDomChildAt(NodeType.Element, "", "LHSArithmeticExpression", index));
		}

		public ArithmeticExpression GetLHSArithmeticExpression()
		{
			return GetLHSArithmeticExpressionAt(0);
		}

		public ArithmeticExpression LHSArithmeticExpression
		{
			get
			{
				return GetLHSArithmeticExpressionAt(0);
			}
		}

		public void RemoveLHSArithmeticExpressionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "LHSArithmeticExpression", index);
		}

		public void RemoveLHSArithmeticExpression()
		{
			while (HasLHSArithmeticExpression())
				RemoveLHSArithmeticExpressionAt(0);
		}

		public void AddLHSArithmeticExpression(ArithmeticExpression newValue)
		{
			AppendDomElement("", "LHSArithmeticExpression", newValue);
		}

		public void InsertLHSArithmeticExpressionAt(ArithmeticExpression newValue, int index)
		{
			InsertDomElementAt("", "LHSArithmeticExpression", index, newValue);
		}

		public void ReplaceLHSArithmeticExpressionAt(ArithmeticExpression newValue, int index)
		{
			ReplaceDomElementAt("", "LHSArithmeticExpression", index, newValue);
		}
		#endregion // LHSArithmeticExpression accessor methods

		#region LHSArithmeticExpression collection
        public LHSArithmeticExpressionCollection	MyLHSArithmeticExpressions = new LHSArithmeticExpressionCollection( );

        public class LHSArithmeticExpressionCollection: IEnumerable
        {
            RelationalType parent;
            public RelationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public LHSArithmeticExpressionEnumerator GetEnumerator() 
			{
				return new LHSArithmeticExpressionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LHSArithmeticExpressionEnumerator: IEnumerator 
        {
			int nIndex;
			RelationalType parent;
			public LHSArithmeticExpressionEnumerator(RelationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LHSArithmeticExpressionCount );
			}
			public ArithmeticExpression  Current 
			{
				get 
				{
					return(parent.GetLHSArithmeticExpressionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // LHSArithmeticExpression collection

		#region RelationalOperator accessor methods
		public int GetRelationalOperatorMinCount()
		{
			return 1;
		}

		public int RelationalOperatorMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRelationalOperatorMaxCount()
		{
			return 1;
		}

		public int RelationalOperatorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRelationalOperatorCount()
		{
			return DomChildCount(NodeType.Element, "", "RelationalOperator");
		}

		public int RelationalOperatorCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "RelationalOperator");
			}
		}

		public bool HasRelationalOperator()
		{
			return HasDomChild(NodeType.Element, "", "RelationalOperator");
		}

		public RelationalOperator GetRelationalOperatorAt(int index)
		{
			return new RelationalOperator(GetDomChildAt(NodeType.Element, "", "RelationalOperator", index));
		}

		public RelationalOperator GetRelationalOperator()
		{
			return GetRelationalOperatorAt(0);
		}

		public RelationalOperator RelationalOperator
		{
			get
			{
				return GetRelationalOperatorAt(0);
			}
		}

		public void RemoveRelationalOperatorAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "RelationalOperator", index);
		}

		public void RemoveRelationalOperator()
		{
			while (HasRelationalOperator())
				RemoveRelationalOperatorAt(0);
		}

		public void AddRelationalOperator(RelationalOperator newValue)
		{
			AppendDomElement("", "RelationalOperator", newValue);
		}

		public void InsertRelationalOperatorAt(RelationalOperator newValue, int index)
		{
			InsertDomElementAt("", "RelationalOperator", index, newValue);
		}

		public void ReplaceRelationalOperatorAt(RelationalOperator newValue, int index)
		{
			ReplaceDomElementAt("", "RelationalOperator", index, newValue);
		}
		#endregion // RelationalOperator accessor methods

		#region RelationalOperator collection
        public RelationalOperatorCollection	MyRelationalOperators = new RelationalOperatorCollection( );

        public class RelationalOperatorCollection: IEnumerable
        {
            RelationalType parent;
            public RelationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public RelationalOperatorEnumerator GetEnumerator() 
			{
				return new RelationalOperatorEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RelationalOperatorEnumerator: IEnumerator 
        {
			int nIndex;
			RelationalType parent;
			public RelationalOperatorEnumerator(RelationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RelationalOperatorCount );
			}
			public RelationalOperator  Current 
			{
				get 
				{
					return(parent.GetRelationalOperatorAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // RelationalOperator collection

		#region RHSArithmeticExpression accessor methods
		public int GetRHSArithmeticExpressionMinCount()
		{
			return 1;
		}

		public int RHSArithmeticExpressionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRHSArithmeticExpressionMaxCount()
		{
			return 1;
		}

		public int RHSArithmeticExpressionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRHSArithmeticExpressionCount()
		{
			return DomChildCount(NodeType.Element, "", "RHSArithmeticExpression");
		}

		public int RHSArithmeticExpressionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "RHSArithmeticExpression");
			}
		}

		public bool HasRHSArithmeticExpression()
		{
			return HasDomChild(NodeType.Element, "", "RHSArithmeticExpression");
		}

		public ArithmeticExpression GetRHSArithmeticExpressionAt(int index)
		{
			return new ArithmeticExpression(GetDomChildAt(NodeType.Element, "", "RHSArithmeticExpression", index));
		}

		public ArithmeticExpression GetRHSArithmeticExpression()
		{
			return GetRHSArithmeticExpressionAt(0);
		}

		public ArithmeticExpression RHSArithmeticExpression
		{
			get
			{
				return GetRHSArithmeticExpressionAt(0);
			}
		}

		public void RemoveRHSArithmeticExpressionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "RHSArithmeticExpression", index);
		}

		public void RemoveRHSArithmeticExpression()
		{
			while (HasRHSArithmeticExpression())
				RemoveRHSArithmeticExpressionAt(0);
		}

		public void AddRHSArithmeticExpression(ArithmeticExpression newValue)
		{
			AppendDomElement("", "RHSArithmeticExpression", newValue);
		}

		public void InsertRHSArithmeticExpressionAt(ArithmeticExpression newValue, int index)
		{
			InsertDomElementAt("", "RHSArithmeticExpression", index, newValue);
		}

		public void ReplaceRHSArithmeticExpressionAt(ArithmeticExpression newValue, int index)
		{
			ReplaceDomElementAt("", "RHSArithmeticExpression", index, newValue);
		}
		#endregion // RHSArithmeticExpression accessor methods

		#region RHSArithmeticExpression collection
        public RHSArithmeticExpressionCollection	MyRHSArithmeticExpressions = new RHSArithmeticExpressionCollection( );

        public class RHSArithmeticExpressionCollection: IEnumerable
        {
            RelationalType parent;
            public RelationalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public RHSArithmeticExpressionEnumerator GetEnumerator() 
			{
				return new RHSArithmeticExpressionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RHSArithmeticExpressionEnumerator: IEnumerator 
        {
			int nIndex;
			RelationalType parent;
			public RHSArithmeticExpressionEnumerator(RelationalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RHSArithmeticExpressionCount );
			}
			public ArithmeticExpression  Current 
			{
				get 
				{
					return(parent.GetRHSArithmeticExpressionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // RHSArithmeticExpression collection

        private void SetCollectionParents()
        {
            MyLHSArithmeticExpressions.Parent = this; 
            MyRelationalOperators.Parent = this; 
            MyRHSArithmeticExpressions.Parent = this; 
	}
}
}
