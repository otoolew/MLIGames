//
// VariableType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class VariableType : Altova.Node
	{
		#region Forward constructors
		public VariableType() : base() { SetCollectionParents(); }
		public VariableType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public VariableType(XmlNode node) : base(node) { SetCollectionParents(); }
		public VariableType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "Name");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Name", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "", "Type");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Type", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "", "Value");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Value", i);
				InternalAdjustPrefix(DOMNode, true);
				new ConstantType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "UpdateScript");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "UpdateScript", i);
				InternalAdjustPrefix(DOMNode, true);
				new ScriptReference(DOMNode).AdjustPrefix();
			}
		}


		#region Name accessor methods
		public int GetNameMinCount()
		{
			return 1;
		}

		public int NameMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameMaxCount()
		{
			return 1;
		}

		public int NameMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetNameCount()
		{
			return DomChildCount(NodeType.Element, "", "Name");
		}

		public int NameCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Name");
			}
		}

		public bool HasName()
		{
			return HasDomChild(NodeType.Element, "", "Name");
		}

		public SchemaString GetNameAt(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Name", index)));
		}

		public SchemaString GetName()
		{
			return GetNameAt(0);
		}

		public SchemaString Name
		{
			get
			{
				return GetNameAt(0);
			}
		}

		public void RemoveNameAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Name", index);
		}

		public void RemoveName()
		{
			while (HasName())
				RemoveNameAt(0);
		}

		public void AddName(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "", "Name", newValue.ToString());
		}

		public void InsertNameAt(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Name", index, newValue.ToString());
		}

		public void ReplaceNameAt(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Name", index, newValue.ToString());
		}
		#endregion // Name accessor methods

		#region Name collection
        public NameCollection	MyNames = new NameCollection( );

        public class NameCollection: IEnumerable
        {
            VariableType parent;
            public VariableType Parent
			{
				set
				{
					parent = value;
				}
			}
			public NameEnumerator GetEnumerator() 
			{
				return new NameEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class NameEnumerator: IEnumerator 
        {
			int nIndex;
			VariableType parent;
			public NameEnumerator(VariableType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.NameCount );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetNameAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Name collection

		#region Type2 accessor methods
		public int GetType2MinCount()
		{
			return 1;
		}

		public int Type2MinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetType2MaxCount()
		{
			return 1;
		}

		public int Type2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetType2Count()
		{
			return DomChildCount(NodeType.Element, "", "Type");
		}

		public int Type2Count
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Type");
			}
		}

		public bool HasType2()
		{
			return HasDomChild(NodeType.Element, "", "Type");
		}

		public SchemaLong GetType2At(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Type", index)));
		}

		public SchemaLong GetType2()
		{
			return GetType2At(0);
		}

		public SchemaLong Type2
		{
			get
			{
				return GetType2At(0);
			}
		}

		public void RemoveType2At(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Type", index);
		}

		public void RemoveType2()
		{
			while (HasType2())
				RemoveType2At(0);
		}

		public void AddType2(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Element, "", "Type", newValue.ToString());
		}

		public void InsertType2At(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Type", index, newValue.ToString());
		}

		public void ReplaceType2At(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Type", index, newValue.ToString());
		}
		#endregion // Type2 accessor methods

		#region Type2 collection
        public Type2Collection	MyType2s = new Type2Collection( );

        public class Type2Collection: IEnumerable
        {
            VariableType parent;
            public VariableType Parent
			{
				set
				{
					parent = value;
				}
			}
			public Type2Enumerator GetEnumerator() 
			{
				return new Type2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Type2Enumerator: IEnumerator 
        {
			int nIndex;
			VariableType parent;
			public Type2Enumerator(VariableType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Type2Count );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetType2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Type2 collection

		#region Value accessor methods
		public int GetValueMinCount()
		{
			return 0;
		}

		public int ValueMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetValueMaxCount()
		{
			return 1;
		}

		public int ValueMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetValueCount()
		{
			return DomChildCount(NodeType.Element, "", "Value");
		}

		public int ValueCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Value");
			}
		}

		public bool HasValue()
		{
			return HasDomChild(NodeType.Element, "", "Value");
		}

		public ConstantType GetValueAt(int index)
		{
			return new ConstantType(GetDomChildAt(NodeType.Element, "", "Value", index));
		}

		public ConstantType GetValue()
		{
			return GetValueAt(0);
		}

		public ConstantType Value
		{
			get
			{
				return GetValueAt(0);
			}
		}

		public void RemoveValueAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Value", index);
		}

		public void RemoveValue()
		{
			while (HasValue())
				RemoveValueAt(0);
		}

		public void AddValue(ConstantType newValue)
		{
			AppendDomElement("", "Value", newValue);
		}

		public void InsertValueAt(ConstantType newValue, int index)
		{
			InsertDomElementAt("", "Value", index, newValue);
		}

		public void ReplaceValueAt(ConstantType newValue, int index)
		{
			ReplaceDomElementAt("", "Value", index, newValue);
		}
		#endregion // Value accessor methods

		#region Value collection
        public ValueCollection	MyValues = new ValueCollection( );

        public class ValueCollection: IEnumerable
        {
            VariableType parent;
            public VariableType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ValueEnumerator GetEnumerator() 
			{
				return new ValueEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ValueEnumerator: IEnumerator 
        {
			int nIndex;
			VariableType parent;
			public ValueEnumerator(VariableType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ValueCount );
			}
			public ConstantType  Current 
			{
				get 
				{
					return(parent.GetValueAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Value collection

		#region UpdateScript accessor methods
		public int GetUpdateScriptMinCount()
		{
			return 0;
		}

		public int UpdateScriptMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetUpdateScriptMaxCount()
		{
			return 1;
		}

		public int UpdateScriptMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUpdateScriptCount()
		{
			return DomChildCount(NodeType.Element, "", "UpdateScript");
		}

		public int UpdateScriptCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UpdateScript");
			}
		}

		public bool HasUpdateScript()
		{
			return HasDomChild(NodeType.Element, "", "UpdateScript");
		}

		public ScriptReference GetUpdateScriptAt(int index)
		{
			return new ScriptReference(GetDomChildAt(NodeType.Element, "", "UpdateScript", index));
		}

		public ScriptReference GetUpdateScript()
		{
			return GetUpdateScriptAt(0);
		}

		public ScriptReference UpdateScript
		{
			get
			{
				return GetUpdateScriptAt(0);
			}
		}

		public void RemoveUpdateScriptAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UpdateScript", index);
		}

		public void RemoveUpdateScript()
		{
			while (HasUpdateScript())
				RemoveUpdateScriptAt(0);
		}

		public void AddUpdateScript(ScriptReference newValue)
		{
			AppendDomElement("", "UpdateScript", newValue);
		}

		public void InsertUpdateScriptAt(ScriptReference newValue, int index)
		{
			InsertDomElementAt("", "UpdateScript", index, newValue);
		}

		public void ReplaceUpdateScriptAt(ScriptReference newValue, int index)
		{
			ReplaceDomElementAt("", "UpdateScript", index, newValue);
		}
		#endregion // UpdateScript accessor methods

		#region UpdateScript collection
        public UpdateScriptCollection	MyUpdateScripts = new UpdateScriptCollection( );

        public class UpdateScriptCollection: IEnumerable
        {
            VariableType parent;
            public VariableType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UpdateScriptEnumerator GetEnumerator() 
			{
				return new UpdateScriptEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UpdateScriptEnumerator: IEnumerator 
        {
			int nIndex;
			VariableType parent;
			public UpdateScriptEnumerator(VariableType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UpdateScriptCount );
			}
			public ScriptReference  Current 
			{
				get 
				{
					return(parent.GetUpdateScriptAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // UpdateScript collection

        private void SetCollectionParents()
        {
            MyNames.Parent = this; 
            MyType2s.Parent = this; 
            MyValues.Parent = this; 
            MyUpdateScripts.Parent = this; 
	}
}
}
