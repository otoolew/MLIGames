//
// UnaryType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class UnaryType : Altova.Node
	{
		#region Forward constructors
		public UnaryType() : base() { SetCollectionParents(); }
		public UnaryType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public UnaryType(XmlNode node) : base(node) { SetCollectionParents(); }
		public UnaryType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "UnaryOperator");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "UnaryOperator", i);
				InternalAdjustPrefix(DOMNode, true);
				new UnaryOperator(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "LogicalExpression");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "LogicalExpression", i);
				InternalAdjustPrefix(DOMNode, true);
				new LogicalExpression(DOMNode).AdjustPrefix();
			}
		}


		#region UnaryOperator accessor methods
		public int GetUnaryOperatorMinCount()
		{
			return 1;
		}

		public int UnaryOperatorMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUnaryOperatorMaxCount()
		{
			return 1;
		}

		public int UnaryOperatorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetUnaryOperatorCount()
		{
			return DomChildCount(NodeType.Element, "", "UnaryOperator");
		}

		public int UnaryOperatorCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "UnaryOperator");
			}
		}

		public bool HasUnaryOperator()
		{
			return HasDomChild(NodeType.Element, "", "UnaryOperator");
		}

		public UnaryOperator GetUnaryOperatorAt(int index)
		{
			return new UnaryOperator(GetDomChildAt(NodeType.Element, "", "UnaryOperator", index));
		}

		public UnaryOperator GetUnaryOperator()
		{
			return GetUnaryOperatorAt(0);
		}

		public UnaryOperator UnaryOperator
		{
			get
			{
				return GetUnaryOperatorAt(0);
			}
		}

		public void RemoveUnaryOperatorAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "UnaryOperator", index);
		}

		public void RemoveUnaryOperator()
		{
			while (HasUnaryOperator())
				RemoveUnaryOperatorAt(0);
		}

		public void AddUnaryOperator(UnaryOperator newValue)
		{
			AppendDomElement("", "UnaryOperator", newValue);
		}

		public void InsertUnaryOperatorAt(UnaryOperator newValue, int index)
		{
			InsertDomElementAt("", "UnaryOperator", index, newValue);
		}

		public void ReplaceUnaryOperatorAt(UnaryOperator newValue, int index)
		{
			ReplaceDomElementAt("", "UnaryOperator", index, newValue);
		}
		#endregion // UnaryOperator accessor methods

		#region UnaryOperator collection
        public UnaryOperatorCollection	MyUnaryOperators = new UnaryOperatorCollection( );

        public class UnaryOperatorCollection: IEnumerable
        {
            UnaryType parent;
            public UnaryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public UnaryOperatorEnumerator GetEnumerator() 
			{
				return new UnaryOperatorEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class UnaryOperatorEnumerator: IEnumerator 
        {
			int nIndex;
			UnaryType parent;
			public UnaryOperatorEnumerator(UnaryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.UnaryOperatorCount );
			}
			public UnaryOperator  Current 
			{
				get 
				{
					return(parent.GetUnaryOperatorAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // UnaryOperator collection

		#region LogicalExpression accessor methods
		public int GetLogicalExpressionMinCount()
		{
			return 1;
		}

		public int LogicalExpressionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLogicalExpressionMaxCount()
		{
			return 1;
		}

		public int LogicalExpressionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLogicalExpressionCount()
		{
			return DomChildCount(NodeType.Element, "", "LogicalExpression");
		}

		public int LogicalExpressionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "LogicalExpression");
			}
		}

		public bool HasLogicalExpression()
		{
			return HasDomChild(NodeType.Element, "", "LogicalExpression");
		}

		public LogicalExpression GetLogicalExpressionAt(int index)
		{
			return new LogicalExpression(GetDomChildAt(NodeType.Element, "", "LogicalExpression", index));
		}

		public LogicalExpression GetLogicalExpression()
		{
			return GetLogicalExpressionAt(0);
		}

		public LogicalExpression LogicalExpression
		{
			get
			{
				return GetLogicalExpressionAt(0);
			}
		}

		public void RemoveLogicalExpressionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "LogicalExpression", index);
		}

		public void RemoveLogicalExpression()
		{
			while (HasLogicalExpression())
				RemoveLogicalExpressionAt(0);
		}

		public void AddLogicalExpression(LogicalExpression newValue)
		{
			AppendDomElement("", "LogicalExpression", newValue);
		}

		public void InsertLogicalExpressionAt(LogicalExpression newValue, int index)
		{
			InsertDomElementAt("", "LogicalExpression", index, newValue);
		}

		public void ReplaceLogicalExpressionAt(LogicalExpression newValue, int index)
		{
			ReplaceDomElementAt("", "LogicalExpression", index, newValue);
		}
		#endregion // LogicalExpression accessor methods

		#region LogicalExpression collection
        public LogicalExpressionCollection	MyLogicalExpressions = new LogicalExpressionCollection( );

        public class LogicalExpressionCollection: IEnumerable
        {
            UnaryType parent;
            public UnaryType Parent
			{
				set
				{
					parent = value;
				}
			}
			public LogicalExpressionEnumerator GetEnumerator() 
			{
				return new LogicalExpressionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LogicalExpressionEnumerator: IEnumerator 
        {
			int nIndex;
			UnaryType parent;
			public LogicalExpressionEnumerator(UnaryType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LogicalExpressionCount );
			}
			public LogicalExpression  Current 
			{
				get 
				{
					return(parent.GetLogicalExpressionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // LogicalExpression collection

        private void SetCollectionParents()
        {
            MyUnaryOperators.Parent = this; 
            MyLogicalExpressions.Parent = this; 
	}
}
}
