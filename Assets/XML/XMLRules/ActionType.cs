//
// ActionType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class ActionType : Altova.Node
	{
		#region Forward constructors
		public ActionType() : base() { SetCollectionParents(); }
		public ActionType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ActionType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ActionType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "Certainty");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Certainty", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "", "CallScript");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "CallScript", i);
				InternalAdjustPrefix(DOMNode, true);
				new ScriptReference(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "ChangeState");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "ChangeState", i);
				InternalAdjustPrefix(DOMNode, true);
				new AssignmentExpression(DOMNode).AdjustPrefix();
			}
		}


		#region Certainty accessor methods
		public int GetCertaintyMinCount()
		{
			return 1;
		}

		public int CertaintyMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCertaintyMaxCount()
		{
			return 1;
		}

		public int CertaintyMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCertaintyCount()
		{
			return DomChildCount(NodeType.Element, "", "Certainty");
		}

		public int CertaintyCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Certainty");
			}
		}

		public bool HasCertainty()
		{
			return HasDomChild(NodeType.Element, "", "Certainty");
		}

		public SchemaDecimal GetCertaintyAt(int index)
		{
			return new SchemaDecimal(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Certainty", index)));
		}

		public SchemaDecimal GetCertainty()
		{
			return GetCertaintyAt(0);
		}

		public SchemaDecimal Certainty
		{
			get
			{
				return GetCertaintyAt(0);
			}
		}

		public void RemoveCertaintyAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Certainty", index);
		}

		public void RemoveCertainty()
		{
			while (HasCertainty())
				RemoveCertaintyAt(0);
		}

		public void AddCertainty(SchemaDecimal newValue)
		{
			AppendDomChild(NodeType.Element, "", "Certainty", newValue.ToString());
		}

		public void InsertCertaintyAt(SchemaDecimal newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Certainty", index, newValue.ToString());
		}

		public void ReplaceCertaintyAt(SchemaDecimal newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Certainty", index, newValue.ToString());
		}
		#endregion // Certainty accessor methods

		#region Certainty collection
        public CertaintyCollection	MyCertaintys = new CertaintyCollection( );

        public class CertaintyCollection: IEnumerable
        {
            ActionType parent;
            public ActionType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CertaintyEnumerator GetEnumerator() 
			{
				return new CertaintyEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CertaintyEnumerator: IEnumerator 
        {
			int nIndex;
			ActionType parent;
			public CertaintyEnumerator(ActionType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CertaintyCount );
			}
			public SchemaDecimal  Current 
			{
				get 
				{
					return(parent.GetCertaintyAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Certainty collection

		#region CallScript accessor methods
		public int GetCallScriptMinCount()
		{
			return 1;
		}

		public int CallScriptMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCallScriptMaxCount()
		{
			return 1;
		}

		public int CallScriptMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetCallScriptCount()
		{
			return DomChildCount(NodeType.Element, "", "CallScript");
		}

		public int CallScriptCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "CallScript");
			}
		}

		public bool HasCallScript()
		{
			return HasDomChild(NodeType.Element, "", "CallScript");
		}

		public ScriptReference GetCallScriptAt(int index)
		{
			return new ScriptReference(GetDomChildAt(NodeType.Element, "", "CallScript", index));
		}

		public ScriptReference GetCallScript()
		{
			return GetCallScriptAt(0);
		}

		public ScriptReference CallScript
		{
			get
			{
				return GetCallScriptAt(0);
			}
		}

		public void RemoveCallScriptAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "CallScript", index);
		}

		public void RemoveCallScript()
		{
			while (HasCallScript())
				RemoveCallScriptAt(0);
		}

		public void AddCallScript(ScriptReference newValue)
		{
			AppendDomElement("", "CallScript", newValue);
		}

		public void InsertCallScriptAt(ScriptReference newValue, int index)
		{
			InsertDomElementAt("", "CallScript", index, newValue);
		}

		public void ReplaceCallScriptAt(ScriptReference newValue, int index)
		{
			ReplaceDomElementAt("", "CallScript", index, newValue);
		}
		#endregion // CallScript accessor methods

		#region CallScript collection
        public CallScriptCollection	MyCallScripts = new CallScriptCollection( );

        public class CallScriptCollection: IEnumerable
        {
            ActionType parent;
            public ActionType Parent
			{
				set
				{
					parent = value;
				}
			}
			public CallScriptEnumerator GetEnumerator() 
			{
				return new CallScriptEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class CallScriptEnumerator: IEnumerator 
        {
			int nIndex;
			ActionType parent;
			public CallScriptEnumerator(ActionType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.CallScriptCount );
			}
			public ScriptReference  Current 
			{
				get 
				{
					return(parent.GetCallScriptAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // CallScript collection

		#region ChangeState accessor methods
		public int GetChangeStateMinCount()
		{
			return 1;
		}

		public int ChangeStateMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetChangeStateMaxCount()
		{
			return 1;
		}

		public int ChangeStateMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetChangeStateCount()
		{
			return DomChildCount(NodeType.Element, "", "ChangeState");
		}

		public int ChangeStateCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "ChangeState");
			}
		}

		public bool HasChangeState()
		{
			return HasDomChild(NodeType.Element, "", "ChangeState");
		}

		public AssignmentExpression GetChangeStateAt(int index)
		{
			return new AssignmentExpression(GetDomChildAt(NodeType.Element, "", "ChangeState", index));
		}

		public AssignmentExpression GetChangeState()
		{
			return GetChangeStateAt(0);
		}

		public AssignmentExpression ChangeState
		{
			get
			{
				return GetChangeStateAt(0);
			}
		}

		public void RemoveChangeStateAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "ChangeState", index);
		}

		public void RemoveChangeState()
		{
			while (HasChangeState())
				RemoveChangeStateAt(0);
		}

		public void AddChangeState(AssignmentExpression newValue)
		{
			AppendDomElement("", "ChangeState", newValue);
		}

		public void InsertChangeStateAt(AssignmentExpression newValue, int index)
		{
			InsertDomElementAt("", "ChangeState", index, newValue);
		}

		public void ReplaceChangeStateAt(AssignmentExpression newValue, int index)
		{
			ReplaceDomElementAt("", "ChangeState", index, newValue);
		}
		#endregion // ChangeState accessor methods

		#region ChangeState collection
        public ChangeStateCollection	MyChangeStates = new ChangeStateCollection( );

        public class ChangeStateCollection: IEnumerable
        {
            ActionType parent;
            public ActionType Parent
			{
				set
				{
					parent = value;
				}
			}
			public ChangeStateEnumerator GetEnumerator() 
			{
				return new ChangeStateEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class ChangeStateEnumerator: IEnumerator 
        {
			int nIndex;
			ActionType parent;
			public ChangeStateEnumerator(ActionType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.ChangeStateCount );
			}
			public AssignmentExpression  Current 
			{
				get 
				{
					return(parent.GetChangeStateAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // ChangeState collection

        private void SetCollectionParents()
        {
            MyCertaintys.Parent = this; 
            MyCallScripts.Parent = this; 
            MyChangeStates.Parent = this; 
	}
}
}
