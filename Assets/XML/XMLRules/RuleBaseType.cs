//
// RuleBaseType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class RuleBaseType : Altova.Node
	{
		#region Forward constructors
		public RuleBaseType() : base() { SetCollectionParents(); }
		public RuleBaseType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public RuleBaseType(XmlNode node) : base(node) { SetCollectionParents(); }
		public RuleBaseType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "Variables");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Variables", i);
				InternalAdjustPrefix(DOMNode, true);
				new VariableType(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "Rules");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Rules", i);
				InternalAdjustPrefix(DOMNode, true);
				new RuleType(DOMNode).AdjustPrefix();
			}
		}


		#region Variables accessor methods
		public int GetVariablesMinCount()
		{
			return 0;
		}

		public int VariablesMinCount
		{
			get
			{
				return 0;
			}
		}

		public int GetVariablesMaxCount()
		{
			return Int32.MaxValue;
		}

		public int VariablesMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetVariablesCount()
		{
			return DomChildCount(NodeType.Element, "", "Variables");
		}

		public int VariablesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Variables");
			}
		}

		public bool HasVariables()
		{
			return HasDomChild(NodeType.Element, "", "Variables");
		}

		public VariableType GetVariablesAt(int index)
		{
			return new VariableType(GetDomChildAt(NodeType.Element, "", "Variables", index));
		}

		public VariableType GetVariables()
		{
			return GetVariablesAt(0);
		}

		public VariableType Variables
		{
			get
			{
				return GetVariablesAt(0);
			}
		}

		public void RemoveVariablesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Variables", index);
		}

		public void RemoveVariables()
		{
			while (HasVariables())
				RemoveVariablesAt(0);
		}

		public void AddVariables(VariableType newValue)
		{
			AppendDomElement("", "Variables", newValue);
		}

		public void InsertVariablesAt(VariableType newValue, int index)
		{
			InsertDomElementAt("", "Variables", index, newValue);
		}

		public void ReplaceVariablesAt(VariableType newValue, int index)
		{
			ReplaceDomElementAt("", "Variables", index, newValue);
		}
		#endregion // Variables accessor methods

		#region Variables collection
        public VariablesCollection	MyVariabless = new VariablesCollection( );

        public class VariablesCollection: IEnumerable
        {
            RuleBaseType parent;
            public RuleBaseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public VariablesEnumerator GetEnumerator() 
			{
				return new VariablesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class VariablesEnumerator: IEnumerator 
        {
			int nIndex;
			RuleBaseType parent;
			public VariablesEnumerator(RuleBaseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.VariablesCount );
			}
			public VariableType  Current 
			{
				get 
				{
					return(parent.GetVariablesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Variables collection

		#region Rules accessor methods
		public int GetRulesMinCount()
		{
			return 1;
		}

		public int RulesMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRulesMaxCount()
		{
			return Int32.MaxValue;
		}

		public int RulesMaxCount
		{
			get
			{
				return Int32.MaxValue;
			}
		}

		public int GetRulesCount()
		{
			return DomChildCount(NodeType.Element, "", "Rules");
		}

		public int RulesCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Rules");
			}
		}

		public bool HasRules()
		{
			return HasDomChild(NodeType.Element, "", "Rules");
		}

		public RuleType GetRulesAt(int index)
		{
			return new RuleType(GetDomChildAt(NodeType.Element, "", "Rules", index));
		}

		public RuleType GetRules()
		{
			return GetRulesAt(0);
		}

		public RuleType Rules
		{
			get
			{
				return GetRulesAt(0);
			}
		}

		public void RemoveRulesAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Rules", index);
		}

		public void RemoveRules()
		{
			while (HasRules())
				RemoveRulesAt(0);
		}

		public void AddRules(RuleType newValue)
		{
			AppendDomElement("", "Rules", newValue);
		}

		public void InsertRulesAt(RuleType newValue, int index)
		{
			InsertDomElementAt("", "Rules", index, newValue);
		}

		public void ReplaceRulesAt(RuleType newValue, int index)
		{
			ReplaceDomElementAt("", "Rules", index, newValue);
		}
		#endregion // Rules accessor methods

		#region Rules collection
        public RulesCollection	MyRuless = new RulesCollection( );

        public class RulesCollection: IEnumerable
        {
            RuleBaseType parent;
            public RuleBaseType Parent
			{
				set
				{
					parent = value;
				}
			}
			public RulesEnumerator GetEnumerator() 
			{
				return new RulesEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RulesEnumerator: IEnumerator 
        {
			int nIndex;
			RuleBaseType parent;
			public RulesEnumerator(RuleBaseType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RulesCount );
			}
			public RuleType  Current 
			{
				get 
				{
					return(parent.GetRulesAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Rules collection

        private void SetCollectionParents()
        {
            MyVariabless.Parent = this; 
            MyRuless.Parent = this; 
	}
}
}
