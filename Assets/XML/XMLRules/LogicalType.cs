//
// LogicalType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class LogicalType : Altova.Node
	{
		#region Forward constructors
		public LogicalType() : base() { SetCollectionParents(); }
		public LogicalType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public LogicalType(XmlNode node) : base(node) { SetCollectionParents(); }
		public LogicalType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "LHSLogicalExpression");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "LHSLogicalExpression", i);
				InternalAdjustPrefix(DOMNode, true);
				new LogicalExpression(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "LogicalOperator");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "LogicalOperator", i);
				InternalAdjustPrefix(DOMNode, true);
				new LogicalOperator(DOMNode).AdjustPrefix();
			}

			nCount = DomChildCount(NodeType.Element, "", "RHSLogicalExpression");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "RHSLogicalExpression", i);
				InternalAdjustPrefix(DOMNode, true);
				new LogicalExpression(DOMNode).AdjustPrefix();
			}
		}


		#region LHSLogicalExpression accessor methods
		public int GetLHSLogicalExpressionMinCount()
		{
			return 1;
		}

		public int LHSLogicalExpressionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLHSLogicalExpressionMaxCount()
		{
			return 1;
		}

		public int LHSLogicalExpressionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLHSLogicalExpressionCount()
		{
			return DomChildCount(NodeType.Element, "", "LHSLogicalExpression");
		}

		public int LHSLogicalExpressionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "LHSLogicalExpression");
			}
		}

		public bool HasLHSLogicalExpression()
		{
			return HasDomChild(NodeType.Element, "", "LHSLogicalExpression");
		}

		public LogicalExpression GetLHSLogicalExpressionAt(int index)
		{
			return new LogicalExpression(GetDomChildAt(NodeType.Element, "", "LHSLogicalExpression", index));
		}

		public LogicalExpression GetLHSLogicalExpression()
		{
			return GetLHSLogicalExpressionAt(0);
		}

		public LogicalExpression LHSLogicalExpression
		{
			get
			{
				return GetLHSLogicalExpressionAt(0);
			}
		}

		public void RemoveLHSLogicalExpressionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "LHSLogicalExpression", index);
		}

		public void RemoveLHSLogicalExpression()
		{
			while (HasLHSLogicalExpression())
				RemoveLHSLogicalExpressionAt(0);
		}

		public void AddLHSLogicalExpression(LogicalExpression newValue)
		{
			AppendDomElement("", "LHSLogicalExpression", newValue);
		}

		public void InsertLHSLogicalExpressionAt(LogicalExpression newValue, int index)
		{
			InsertDomElementAt("", "LHSLogicalExpression", index, newValue);
		}

		public void ReplaceLHSLogicalExpressionAt(LogicalExpression newValue, int index)
		{
			ReplaceDomElementAt("", "LHSLogicalExpression", index, newValue);
		}
		#endregion // LHSLogicalExpression accessor methods

		#region LHSLogicalExpression collection
        public LHSLogicalExpressionCollection	MyLHSLogicalExpressions = new LHSLogicalExpressionCollection( );

        public class LHSLogicalExpressionCollection: IEnumerable
        {
            LogicalType parent;
            public LogicalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public LHSLogicalExpressionEnumerator GetEnumerator() 
			{
				return new LHSLogicalExpressionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LHSLogicalExpressionEnumerator: IEnumerator 
        {
			int nIndex;
			LogicalType parent;
			public LHSLogicalExpressionEnumerator(LogicalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LHSLogicalExpressionCount );
			}
			public LogicalExpression  Current 
			{
				get 
				{
					return(parent.GetLHSLogicalExpressionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // LHSLogicalExpression collection

		#region LogicalOperator accessor methods
		public int GetLogicalOperatorMinCount()
		{
			return 1;
		}

		public int LogicalOperatorMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLogicalOperatorMaxCount()
		{
			return 1;
		}

		public int LogicalOperatorMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetLogicalOperatorCount()
		{
			return DomChildCount(NodeType.Element, "", "LogicalOperator");
		}

		public int LogicalOperatorCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "LogicalOperator");
			}
		}

		public bool HasLogicalOperator()
		{
			return HasDomChild(NodeType.Element, "", "LogicalOperator");
		}

		public LogicalOperator GetLogicalOperatorAt(int index)
		{
			return new LogicalOperator(GetDomChildAt(NodeType.Element, "", "LogicalOperator", index));
		}

		public LogicalOperator GetLogicalOperator()
		{
			return GetLogicalOperatorAt(0);
		}

		public LogicalOperator LogicalOperator
		{
			get
			{
				return GetLogicalOperatorAt(0);
			}
		}

		public void RemoveLogicalOperatorAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "LogicalOperator", index);
		}

		public void RemoveLogicalOperator()
		{
			while (HasLogicalOperator())
				RemoveLogicalOperatorAt(0);
		}

		public void AddLogicalOperator(LogicalOperator newValue)
		{
			AppendDomElement("", "LogicalOperator", newValue);
		}

		public void InsertLogicalOperatorAt(LogicalOperator newValue, int index)
		{
			InsertDomElementAt("", "LogicalOperator", index, newValue);
		}

		public void ReplaceLogicalOperatorAt(LogicalOperator newValue, int index)
		{
			ReplaceDomElementAt("", "LogicalOperator", index, newValue);
		}
		#endregion // LogicalOperator accessor methods

		#region LogicalOperator collection
        public LogicalOperatorCollection	MyLogicalOperators = new LogicalOperatorCollection( );

        public class LogicalOperatorCollection: IEnumerable
        {
            LogicalType parent;
            public LogicalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public LogicalOperatorEnumerator GetEnumerator() 
			{
				return new LogicalOperatorEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class LogicalOperatorEnumerator: IEnumerator 
        {
			int nIndex;
			LogicalType parent;
			public LogicalOperatorEnumerator(LogicalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.LogicalOperatorCount );
			}
			public LogicalOperator  Current 
			{
				get 
				{
					return(parent.GetLogicalOperatorAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // LogicalOperator collection

		#region RHSLogicalExpression accessor methods
		public int GetRHSLogicalExpressionMinCount()
		{
			return 1;
		}

		public int RHSLogicalExpressionMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRHSLogicalExpressionMaxCount()
		{
			return 1;
		}

		public int RHSLogicalExpressionMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRHSLogicalExpressionCount()
		{
			return DomChildCount(NodeType.Element, "", "RHSLogicalExpression");
		}

		public int RHSLogicalExpressionCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "RHSLogicalExpression");
			}
		}

		public bool HasRHSLogicalExpression()
		{
			return HasDomChild(NodeType.Element, "", "RHSLogicalExpression");
		}

		public LogicalExpression GetRHSLogicalExpressionAt(int index)
		{
			return new LogicalExpression(GetDomChildAt(NodeType.Element, "", "RHSLogicalExpression", index));
		}

		public LogicalExpression GetRHSLogicalExpression()
		{
			return GetRHSLogicalExpressionAt(0);
		}

		public LogicalExpression RHSLogicalExpression
		{
			get
			{
				return GetRHSLogicalExpressionAt(0);
			}
		}

		public void RemoveRHSLogicalExpressionAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "RHSLogicalExpression", index);
		}

		public void RemoveRHSLogicalExpression()
		{
			while (HasRHSLogicalExpression())
				RemoveRHSLogicalExpressionAt(0);
		}

		public void AddRHSLogicalExpression(LogicalExpression newValue)
		{
			AppendDomElement("", "RHSLogicalExpression", newValue);
		}

		public void InsertRHSLogicalExpressionAt(LogicalExpression newValue, int index)
		{
			InsertDomElementAt("", "RHSLogicalExpression", index, newValue);
		}

		public void ReplaceRHSLogicalExpressionAt(LogicalExpression newValue, int index)
		{
			ReplaceDomElementAt("", "RHSLogicalExpression", index, newValue);
		}
		#endregion // RHSLogicalExpression accessor methods

		#region RHSLogicalExpression collection
        public RHSLogicalExpressionCollection	MyRHSLogicalExpressions = new RHSLogicalExpressionCollection( );

        public class RHSLogicalExpressionCollection: IEnumerable
        {
            LogicalType parent;
            public LogicalType Parent
			{
				set
				{
					parent = value;
				}
			}
			public RHSLogicalExpressionEnumerator GetEnumerator() 
			{
				return new RHSLogicalExpressionEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RHSLogicalExpressionEnumerator: IEnumerator 
        {
			int nIndex;
			LogicalType parent;
			public RHSLogicalExpressionEnumerator(LogicalType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RHSLogicalExpressionCount );
			}
			public LogicalExpression  Current 
			{
				get 
				{
					return(parent.GetRHSLogicalExpressionAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // RHSLogicalExpression collection

        private void SetCollectionParents()
        {
            MyLHSLogicalExpressions.Parent = this; 
            MyLogicalOperators.Parent = this; 
            MyRHSLogicalExpressions.Parent = this; 
	}
}
}
