//
// XMLRulesType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class XMLRulesType : Altova.Node
	{
		#region Forward constructors
		public XMLRulesType() : base() { SetCollectionParents(); }
		public XMLRulesType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public XMLRulesType(XmlNode node) : base(node) { SetCollectionParents(); }
		public XMLRulesType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "RuleBase");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "RuleBase", i);
				InternalAdjustPrefix(DOMNode, true);
				new RuleBaseType(DOMNode).AdjustPrefix();
			}
		}


		#region RuleBase accessor methods
		public int GetRuleBaseMinCount()
		{
			return 1;
		}

		public int RuleBaseMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRuleBaseMaxCount()
		{
			return 1;
		}

		public int RuleBaseMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetRuleBaseCount()
		{
			return DomChildCount(NodeType.Element, "", "RuleBase");
		}

		public int RuleBaseCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "RuleBase");
			}
		}

		public bool HasRuleBase()
		{
			return HasDomChild(NodeType.Element, "", "RuleBase");
		}

		public RuleBaseType GetRuleBaseAt(int index)
		{
			return new RuleBaseType(GetDomChildAt(NodeType.Element, "", "RuleBase", index));
		}

		public RuleBaseType GetRuleBase()
		{
			return GetRuleBaseAt(0);
		}

		public RuleBaseType RuleBase
		{
			get
			{
				return GetRuleBaseAt(0);
			}
		}

		public void RemoveRuleBaseAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "RuleBase", index);
		}

		public void RemoveRuleBase()
		{
			while (HasRuleBase())
				RemoveRuleBaseAt(0);
		}

		public void AddRuleBase(RuleBaseType newValue)
		{
			AppendDomElement("", "RuleBase", newValue);
		}

		public void InsertRuleBaseAt(RuleBaseType newValue, int index)
		{
			InsertDomElementAt("", "RuleBase", index, newValue);
		}

		public void ReplaceRuleBaseAt(RuleBaseType newValue, int index)
		{
			ReplaceDomElementAt("", "RuleBase", index, newValue);
		}
		#endregion // RuleBase accessor methods

		#region RuleBase collection
        public RuleBaseCollection	MyRuleBases = new RuleBaseCollection( );

        public class RuleBaseCollection: IEnumerable
        {
            XMLRulesType parent;
            public XMLRulesType Parent
			{
				set
				{
					parent = value;
				}
			}
			public RuleBaseEnumerator GetEnumerator() 
			{
				return new RuleBaseEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class RuleBaseEnumerator: IEnumerator 
        {
			int nIndex;
			XMLRulesType parent;
			public RuleBaseEnumerator(XMLRulesType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.RuleBaseCount );
			}
			public RuleBaseType  Current 
			{
				get 
				{
					return(parent.GetRuleBaseAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // RuleBase collection

        private void SetCollectionParents()
        {
            MyRuleBases.Parent = this; 
	}
}
}
