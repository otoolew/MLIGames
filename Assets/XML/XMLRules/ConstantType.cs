//
// ConstantType.cs.cs
//
// This file was generated by XMLSPY 2004 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSPY Documentation for further details.
// http://www.altova.com/xmlspy
//


using System;
using System.Collections;
using System.Xml;
using Altova.Types;

namespace XMLRules
{
	public class ConstantType : Altova.Node
	{
		#region Forward constructors
		public ConstantType() : base() { SetCollectionParents(); }
		public ConstantType(XmlDocument doc) : base(doc) { SetCollectionParents(); }
		public ConstantType(XmlNode node) : base(node) { SetCollectionParents(); }
		public ConstantType(Altova.Node node) : base(node) { SetCollectionParents(); }
		#endregion // Forward constructors

		public override void AdjustPrefix()
		{
			int nCount;

			nCount = DomChildCount(NodeType.Element, "", "Boolean");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Boolean", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "", "Integer");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Integer", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "", "Float");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "Float", i);
				InternalAdjustPrefix(DOMNode, true);
			}

			nCount = DomChildCount(NodeType.Element, "", "String");
			for (int i = 0; i < nCount; i++)
			{
				XmlNode DOMNode = GetDomChildAt(NodeType.Element, "", "String", i);
				InternalAdjustPrefix(DOMNode, true);
			}
		}


		#region Boolean accessor methods
		public int GetBooleanMinCount()
		{
			return 1;
		}

		public int BooleanMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBooleanMaxCount()
		{
			return 1;
		}

		public int BooleanMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetBooleanCount()
		{
			return DomChildCount(NodeType.Element, "", "Boolean");
		}

		public int BooleanCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Boolean");
			}
		}

		public bool HasBoolean()
		{
			return HasDomChild(NodeType.Element, "", "Boolean");
		}

		public SchemaBoolean GetBooleanAt(int index)
		{
			return new SchemaBoolean(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Boolean", index)));
		}

		public SchemaBoolean GetBoolean()
		{
			return GetBooleanAt(0);
		}

		public SchemaBoolean Boolean
		{
			get
			{
				return GetBooleanAt(0);
			}
		}

		public void RemoveBooleanAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Boolean", index);
		}

		public void RemoveBoolean()
		{
			while (HasBoolean())
				RemoveBooleanAt(0);
		}

		public void AddBoolean(SchemaBoolean newValue)
		{
			AppendDomChild(NodeType.Element, "", "Boolean", newValue.ToString());
		}

		public void InsertBooleanAt(SchemaBoolean newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Boolean", index, newValue.ToString());
		}

		public void ReplaceBooleanAt(SchemaBoolean newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Boolean", index, newValue.ToString());
		}
		#endregion // Boolean accessor methods

		#region Boolean collection
        public BooleanCollection	MyBooleans = new BooleanCollection( );

        public class BooleanCollection: IEnumerable
        {
            ConstantType parent;
            public ConstantType Parent
			{
				set
				{
					parent = value;
				}
			}
			public BooleanEnumerator GetEnumerator() 
			{
				return new BooleanEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class BooleanEnumerator: IEnumerator 
        {
			int nIndex;
			ConstantType parent;
			public BooleanEnumerator(ConstantType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.BooleanCount );
			}
			public SchemaBoolean  Current 
			{
				get 
				{
					return(parent.GetBooleanAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Boolean collection

		#region Integer accessor methods
		public int GetIntegerMinCount()
		{
			return 1;
		}

		public int IntegerMinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIntegerMaxCount()
		{
			return 1;
		}

		public int IntegerMaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetIntegerCount()
		{
			return DomChildCount(NodeType.Element, "", "Integer");
		}

		public int IntegerCount
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Integer");
			}
		}

		public bool HasInteger()
		{
			return HasDomChild(NodeType.Element, "", "Integer");
		}

		public SchemaLong GetIntegerAt(int index)
		{
			return new SchemaLong(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Integer", index)));
		}

		public SchemaLong GetInteger()
		{
			return GetIntegerAt(0);
		}

		public SchemaLong Integer
		{
			get
			{
				return GetIntegerAt(0);
			}
		}

		public void RemoveIntegerAt(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Integer", index);
		}

		public void RemoveInteger()
		{
			while (HasInteger())
				RemoveIntegerAt(0);
		}

		public void AddInteger(SchemaLong newValue)
		{
			AppendDomChild(NodeType.Element, "", "Integer", newValue.ToString());
		}

		public void InsertIntegerAt(SchemaLong newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Integer", index, newValue.ToString());
		}

		public void ReplaceIntegerAt(SchemaLong newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Integer", index, newValue.ToString());
		}
		#endregion // Integer accessor methods

		#region Integer collection
        public IntegerCollection	MyIntegers = new IntegerCollection( );

        public class IntegerCollection: IEnumerable
        {
            ConstantType parent;
            public ConstantType Parent
			{
				set
				{
					parent = value;
				}
			}
			public IntegerEnumerator GetEnumerator() 
			{
				return new IntegerEnumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class IntegerEnumerator: IEnumerator 
        {
			int nIndex;
			ConstantType parent;
			public IntegerEnumerator(ConstantType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.IntegerCount );
			}
			public SchemaLong  Current 
			{
				get 
				{
					return(parent.GetIntegerAt(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Integer collection

		#region Float2 accessor methods
		public int GetFloat2MinCount()
		{
			return 1;
		}

		public int Float2MinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFloat2MaxCount()
		{
			return 1;
		}

		public int Float2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetFloat2Count()
		{
			return DomChildCount(NodeType.Element, "", "Float");
		}

		public int Float2Count
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "Float");
			}
		}

		public bool HasFloat2()
		{
			return HasDomChild(NodeType.Element, "", "Float");
		}

		public SchemaDecimal GetFloat2At(int index)
		{
			return new SchemaDecimal(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "Float", index)));
		}

		public SchemaDecimal GetFloat2()
		{
			return GetFloat2At(0);
		}

		public SchemaDecimal Float2
		{
			get
			{
				return GetFloat2At(0);
			}
		}

		public void RemoveFloat2At(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "Float", index);
		}

		public void RemoveFloat2()
		{
			while (HasFloat2())
				RemoveFloat2At(0);
		}

		public void AddFloat2(SchemaDecimal newValue)
		{
			AppendDomChild(NodeType.Element, "", "Float", newValue.ToString());
		}

		public void InsertFloat2At(SchemaDecimal newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "Float", index, newValue.ToString());
		}

		public void ReplaceFloat2At(SchemaDecimal newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "Float", index, newValue.ToString());
		}
		#endregion // Float2 accessor methods

		#region Float2 collection
        public Float2Collection	MyFloat2s = new Float2Collection( );

        public class Float2Collection: IEnumerable
        {
            ConstantType parent;
            public ConstantType Parent
			{
				set
				{
					parent = value;
				}
			}
			public Float2Enumerator GetEnumerator() 
			{
				return new Float2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class Float2Enumerator: IEnumerator 
        {
			int nIndex;
			ConstantType parent;
			public Float2Enumerator(ConstantType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.Float2Count );
			}
			public SchemaDecimal  Current 
			{
				get 
				{
					return(parent.GetFloat2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // Float2 collection

		#region String2 accessor methods
		public int GetString2MinCount()
		{
			return 1;
		}

		public int String2MinCount
		{
			get
			{
				return 1;
			}
		}

		public int GetString2MaxCount()
		{
			return 1;
		}

		public int String2MaxCount
		{
			get
			{
				return 1;
			}
		}

		public int GetString2Count()
		{
			return DomChildCount(NodeType.Element, "", "String");
		}

		public int String2Count
		{
			get
			{
				return DomChildCount(NodeType.Element, "", "String");
			}
		}

		public bool HasString2()
		{
			return HasDomChild(NodeType.Element, "", "String");
		}

		public SchemaString GetString2At(int index)
		{
			return new SchemaString(GetDomNodeValue(GetDomChildAt(NodeType.Element, "", "String", index)));
		}

		public SchemaString GetString2()
		{
			return GetString2At(0);
		}

		public SchemaString String2
		{
			get
			{
				return GetString2At(0);
			}
		}

		public void RemoveString2At(int index)
		{
			RemoveDomChildAt(NodeType.Element, "", "String", index);
		}

		public void RemoveString2()
		{
			while (HasString2())
				RemoveString2At(0);
		}

		public void AddString2(SchemaString newValue)
		{
			AppendDomChild(NodeType.Element, "", "String", newValue.ToString());
		}

		public void InsertString2At(SchemaString newValue, int index)
		{
			InsertDomChildAt(NodeType.Element, "", "String", index, newValue.ToString());
		}

		public void ReplaceString2At(SchemaString newValue, int index)
		{
			ReplaceDomChildAt(NodeType.Element, "", "String", index, newValue.ToString());
		}
		#endregion // String2 accessor methods

		#region String2 collection
        public String2Collection	MyString2s = new String2Collection( );

        public class String2Collection: IEnumerable
        {
            ConstantType parent;
            public ConstantType Parent
			{
				set
				{
					parent = value;
				}
			}
			public String2Enumerator GetEnumerator() 
			{
				return new String2Enumerator(parent);
			}
		
			IEnumerator IEnumerable.GetEnumerator() 
			{
				return GetEnumerator();
			}
        }

        public class String2Enumerator: IEnumerator 
        {
			int nIndex;
			ConstantType parent;
			public String2Enumerator(ConstantType par) 
			{
				parent = par;
				nIndex = -1;
			}
			public void Reset() 
			{
				nIndex = -1;
			}
			public bool MoveNext() 
			{
				nIndex++;
				return(nIndex < parent.String2Count );
			}
			public SchemaString  Current 
			{
				get 
				{
					return(parent.GetString2At(nIndex));
				}
			}
			object IEnumerator.Current 
			{
				get 
				{
					return(Current);
				}
			}
    	}
	
        #endregion // String2 collection

        private void SetCollectionParents()
        {
            MyBooleans.Parent = this; 
            MyIntegers.Parent = this; 
            MyFloat2s.Parent = this; 
            MyString2s.Parent = this; 
	}
}
}
